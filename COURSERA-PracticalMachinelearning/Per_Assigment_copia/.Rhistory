filepath     <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
df.trainning <- read.table(filepath)
str(df.trainning)
df.trainning <- read.table(filepath,  sep=",", header=T)
df.trainning <- read.table(filepath,  sep=",", header=T)
head(df.trainning)
train <- read.table(filepath,  sep="," , header=T)
head(train)
filepath     <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
dftrai <- read.table(filepath,  sep="," , header=T)
filepath     <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dftest <- read.table(filepath,  sep="," , header=T)
sdf<-summary(train)
xt <- xtable(sdf)
opts_chunk$set(echo=T, results="asis")
options(scipen = 1, digits = 3)  # set default digits
library(xtable)
library("lattice")
xt <- xtable(sdf)
print(xt, type="html")
sdf <- summary(dftrai)
xt <- xtable(sdf)
xt
sdf
head(dftest)
dftest
dftest
is.na  (dftest$X)
sum(is.na  (dftest$X))
sum(is.na (dftest$X))
f.numofna <- function (vector){
return(sum(is.na (vector))    )
}
apply(dftain, 2, f.numofna)
apply(dftrain, 2, f.numofna)
apply(dftrai, 2, f.numofna)
nrow(dftrai)
n <- nrow(dftrai)
f.numofna <- function (vector,N){
return(sum(is.na (vector))/N))
}
f.numofna <- function (vector,N){
return(sum(is.na (vector)))
}
n <- nrow(dftrai)
f.numofna <- function (vector,N){
return(  sum(is.na (vector))/N  )
}
apply(dftrai, 2, f.numofna)
apply(dftrai, 2, f.numofna(,N=n))
n <- nrow(dftrai)
apply(dftrai, 2, f.numofna(N=n))
apply(dftrai, 2, f.numofna(N=n,....))
n <- nrow(dftrai)
f.numofna <- function (vector,N=100){
return(  sum(is.na (vector))/N  )
}
apply(dftrai, 2, f.numofna())
n <- nrow(dftrai)
f.numofna <- function (vector,N=100){
return(  sum(is.na (vector))/N  )
}
apply(dftrai, 2, f.numofna)
n <- nrow(dftrai)
f.numofna <- function (vector){
return(  sum(is.na (vector)))
}
apply(dftrai, 2, f.numofna)
apply(dftrai, 2, f.numofna)/n
x<-apply(dftrai, 2, f.numofna)/n
str(x)
x[]
x[1]
x[2]
x>0.5
x>0.5
dftrai[,x>0.5]
x>0.5]
as.vector(x)
dftrai[,x>0.8]
y<- dftrai[,x>0.8]
n <- nrow(dftrai)
n
n <- nrow(dftrai)
n
n <- nrow(y)
n
y<- dftrai[x>0.8,]
n <- nrow(y)
n
n <- nrow(dftrai)
f.numofna <- function (vector){
return(  sum(is.na (vector)))
}
x <- as.vector(apply(dftrai, 2, f.numofna)/n)
x
df <- dftrai[,x<0.8]
df
n <- nrow(df)
n
df <- dftrai[,-(x>0.8)]
nrow(df)
names(df)
length(names(df))
length(names(train))
length(names(dftrai))
df <- dftrai[,-(x>0.8)]
length(names(df))
df <- dftrai[-(x>0.8)]
length(names(df))
length(names(dftrai))
(x>0.8)
df <- dftrai[,(x>0.8)]
length(names(df))
df <- dftrai[,(x>1)]
length(names(df))
df <- dftrai[,(!x>1)]
length(names(df))
df <- dftrai[,(x=1)]
length(names(df))
n <- nrow(dftrai)
f.numofna <- function (vector){
return(  sum(is.na (vector)))
}
x  <- as.vector(apply(dftrai, 2, f.numofna)/n)
df <- dftrai[,(x=0.8)]
length(names(df))
length(names(dftrai))
n <- nrow(dftrai)
f.numofna <- function (vector){
return(  sum(is.na (vector)))
}
x  <- as.vector(apply(dftrai, 2, f.numofna)/n)
x
table(x)
df <- dftrai[,(x<0.8)]
length(names(dftrai))
length(names(df))
ddftrai2 <- dftrai[,(x<0.8)]
length(names(dftrai))
length(names(dftrai2))
n <- nrow(dftrai)
f.numofna <- function (vector){
return(  sum(is.na (vector)))
}
x  <- as.vector(apply(dftrai, 2, f.numofna)/n)
table(x)
ddftrai2 <- dftrai[,(x<0.8)]
length(names(dftrai))
length(names(dftrai2))
dftrai2 <- dftrai[,(x<0.8)]
length(names(dftrai))
length(names(dftrai2))
names(dftrai2)
names(dftest)
(x<0.8)
indices<- (x<0.8)
indices
dftrai2 <- dftrai[,indices]
dftrai2 <- dftrai[,indices]
n         <- nrow(dftrai)
f.numofna <- function (vector){
return( sum(is.na (vector)))
}
x       <- as.vector(apply(dftrai, 2, f.numofna)/n)
table(x)
indices <- (x<0.8)
x       <- as.vector(apply(dftrai, 2, f.numofna)/n)
table(x)
vasrnona <- (x<0.8)
dftrai2 <- dftrai[,vasrnona]
length(names(dftrai))
length(names(dftrai2))
varsnona <- (x<0.8)
names(dftrai[,varsnona])
dftrai2 <- dftrai[,varsnona]
length(names(dftrai))
length(names(dftrai2))
dftrai2 <- dftrai[,varsnona]
length(names(dftrai))
length(names(dftrai2))
str(dftrai[,varsnona])
as.data.frame(names(dftrai[,varsnona]))
str(dftrai[,varsnona])
kk<-str(dftrai[,varsnona])
str(kk)
kk<-str(dftrai[,varsnona])
str(kk)
names(dftrai[,varsnona])
as.data.frame(names(dftrai[,varsnona]))
str(dftrai[,varsnona])
dftrai2$classe
table(dftrai2$classe)
table(dftrai2$classe)/n
prop.table(tt)
tt<-table(dftrai2$classe)
prop.table(tt)
prop.table(tt)*100
library(caret)
fit.rf <-train(classe~., data=dftrai2, method="rf")
fit.rf
rf.pred <- predict(rfmodel, dftest[,varsnona])
rf.pred <- predict(fit.rf, dftest[,varsnona])
fit.rf <-train(classe~., data=dftrai2, method="rf")
warning()
warning()
warning
suppressMessages(library(caret))
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
suppressMessages(library(caret))
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
D <- D[, classe := factor(D[, classe])]
D[, .N, classe]
require(caret)
seed <- as.numeric(as.Date("2014-10-26"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
X <- DTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
DTrainCS <- data.table(data.frame(classe = DTrain[, classe], XCS))
X <- DProbe[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
DProbeCS <- data.table(data.frame(classe = DProbe[, classe], XCS))
DProbeCS
nzv <- nearZeroVar(DTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
require(parallel)
require(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
detectCores()
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method))
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method, trControl=ctrl))
d
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method, trControl=ctrl))
trainingModel
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method, trControl=ctrl))
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method ))
